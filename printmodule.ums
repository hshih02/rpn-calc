# printmodule.ums
# 
# 
#
#

.temps r6, r7
.zero r0

.section text

print_setup:
        ouput "print setup"
        push r1 on stack r2
        r5 := m[r0][r3]
        push r5 on stack r2
        goto queue_print_vals

        queue_print_vals:
        output "queue_print_vals"
        push r5 on stack r2  //double push r5 to preserve value
        goto print_pos_num linking r1
        pop r5 off stack r2
        r5 := r5 + 1
        push r3 on stack r2
        if (r5 >s endvalstack) goto end_queue using r3
        goto queue_print_vals

        end_queue:
        output "end_queue"
        pop r3 off stack r2
        pop r1 off stack r2
        goto r1

print_pos_num:
        pop r5 off stack r2
        push r1 on stack r2
        push r3 on stack r2
        push r4 on stack r2
        r4 := r5
        r5 := r5 mod 10  // get least significant digit
        r4 := r4 / 10    // shift everything down (right) one digit
        r3 := r5
        if (r4 == 0) goto end  // end recursion once we run out of digits
        push r4 on stack r2
        goto print_pos_num linking r1
        end: 
        r3 := r3 + 48 // convert single digit to ascii
        output r3    //print out 
        pop r4 off stack r2
        pop r3 off stack r2
        pop r1 off stack r2
        goto r1