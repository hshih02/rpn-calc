# calc40.ums
# 
# Main module holding all calculation operations and the value stack.
#
.temps r6, r7
.zero r0

// Return address in r1, which will always point to main after each operation
// completes. r1 is used only as an additional temp or the return address
// of an operation that calls underflow checks. Labels are used as return
// addresses in all other situations. Arguments are passed either directly
// via r5 or valuestack.
//
// call stack pointer in r2
// value stack pointer in r3
// nonvolatiles r0, r3, r4
// r0 is zero

.section data
        .space 10000
        endvalstack:

.section rodata
        jumptable:
        .space 256
        endjumptable:

.section init 
        r0 := 0
        r3 := endvalstack
        r5 := jumptable

// Initialize all 256 values of jumptable to input_error or corresponding
// operation
init_jumptable:
        m[r0][r5] := input_error
        r5 := r5 + 1
        if (r5 != endjumptable ) goto init_jumptable using r4
        m[r0][jumptable + '0'] := digit
        m[r0][jumptable + '1'] := digit
        m[r0][jumptable + '2'] := digit
        m[r0][jumptable + '3'] := digit
        m[r0][jumptable + '4'] := digit
        m[r0][jumptable + '5'] := digit
        m[r0][jumptable + '6'] := digit
        m[r0][jumptable + '7'] := digit
        m[r0][jumptable + '8'] := digit
        m[r0][jumptable + '9'] := digit
        m[r0][jumptable + ' '] := waiting
        m[r0][jumptable + '\n'] := newline
        m[r0][jumptable + '+'] := add 
        m[r0][jumptable + '-'] := sub
        m[r0][jumptable + '*'] := mul
        m[r0][jumptable + '/'] := div
        m[r0][jumptable + '|'] := or
        m[r0][jumptable + '&'] := and
        m[r0][jumptable + 'c'] := change
        m[r0][jumptable + '~'] := complement 
        m[r0][jumptable + 's'] := swap 
        m[r0][jumptable + 'd'] := dupe
        m[r0][jumptable + 'p'] := pawp
        m[r0][jumptable + 'z'] := zerostack
        
.section text

// Goes to waiting and returns to r1 upon reaching exit condition, where
// r1 returns to callmain
main:
        push r1 on stack r2
        goto waiting linking r1
        pop r1 off stack r2
        goto r1

// Goes to corresponding jumptable entry based on input, r5 stores
// offset + jumptable
// Goes to end_of_file if r5 == EOF
waiting:
        r5 := input()
        push r4 on stack r2
        if (r5 == 0xFFFFFFFF) goto end_of_file using r4
        pop r4 off stack r2
        r5 := jumptable + r5
        goto m[r0][r5]

// Restores r1 value and returns to r1, where r1 points to main
end_of_file:
        pop r4 off stack r2
        pop r1 off stack r2
        goto r1

// Goes to multiple digit if input is a consecutive single digit number
// If input is not a digit, goes to corresponding operation instead 
// At redirection r5 store offset + jumptable
entering:
        r5 := input()
        push r4 on stack r2
        if (r5 == 0xFFFFFFFF) goto end_of_file using r4
        pop r4 off stack r2 
        r5 := jumptable + r5
        push r4 on stack r2
        push r3 on stack r2
        if (m[r0][r5] == digit) goto multiple_digits using r4, r3
        pop r3 off stack r2
        pop r4 off stack r2
        goto m[r0][r5]

// Restores r3 to original value at start
// Increments top value in valuestack by one tens' place and appends 
// input value to the ones' place, to be store in r5. r5 is pushed to
// top of value stack and replaces the original top value
multiple_digits:
        pop r3 off stack r2
        r5 := r5 - jumptable
        r5 := r5 - 48
        pop r4 off stack r3
        r4 := r4 * 10  // increment by one tens place
        r5 := r5 + r4  // add numbers to get new multi digit value
        pop r4 off stack r2
        push r5 on stack r3
        goto entering

// Checks if value stack is empty. If not empty, calls print_setup and 
// returns to waiting upon completion. Otherwise directly returns to waiting.
newline:
        push r1 on stack r2
        push r4 on stack r2
        // ensure there is a value to print
        if (r3 == endvalstack) goto noprint using r4 
        pop r4 off stack r2
        goto print_setup linking r1
        pop r1 off stack r2
        goto waiting 

        noprint:
        // if no values to print return to waiting
        pop r4 off stack r2
        pop r1 off stack r2
        goto waiting

// Upon entry r5 will store input + jumptable
// Prints an error message and returns to waiting
input_error:
        push r5 on stack r2 
        r5 := r5 - jumptable
        output "Unknown character '"
        output r5
        output "'\n"
        pop r5 off stack r2
        goto waiting

// Upon entry r1 will store pointer to caller
// Checks that there are at least 2 values in the value stack and returns to 
// caller. If insufficient values, restore r1 to point back to main and 
// return to waiting
check_dbl_underflow:
        push r3 on stack r2
        r3 := r3 + 1 
        // ensure there are at least 2 values in value stack
        push r4 on stack r2
        if (r3 >=s endvalstack) goto fail_dbl_underflow using r4
        pop r4 off stack r2
        pop r3 off stack r2
        goto r1  // return to caller

        fail_dbl_underflow:
        pop r4 off stack r2
        pop r3 off stack r2
        pop r1 off stack r2
        output "Stack underflow---expected at least 2 elements\n"
        goto waiting

// Upon entry r1 will store pointer to caller
// Checks that there is at least 1 value in the value stack and returns to 
// caller. If insufficient values, restore r1 to point back to main and 
// return to waiting
check_single_underflow:
        // ensure there is at least 1 value in value stack
        push r4 on stack r2
        if (r3 >=s endvalstack) goto fail_single_underflow using r4
        pop r4 off stack r2
        goto r1  // return to caller

        fail_single_underflow:
        pop r4 off stack r2
        output "Stack underflow---expected at least 1 element\n"
        pop r1 off stack r2
        goto waiting

// Upon entry r5 will always store input + jumptable. Remove ascii offset
// from input value and pushes to valuestack, then goes to entering
digit:
        r5 := r5 - jumptable
        r5 := r5 - 48
        push r5 on stack r3
        goto entering

// Remove the top two values x and y from the value stack and push 
// x + y back onto stack r3, then return to waiting
add:
        push r1 on stack r2
        goto check_dbl_underflow linking r1
        pop r1 off stack r2
        push r4 on stack r2 
        pop r5 off stack r3  // r5 gets top value (y)
        pop r4 off stack r3  // r4 gets next value (x)
        r5 := r4 + r5     // x + y
        push r5 on stack r3
        pop r4 off stack r2 
        goto waiting

// Remove the top two values x and y from the value stack and push 
// x - y back onto stack r3, then return to waiting
sub:
        push r1 on stack r2
        goto check_dbl_underflow linking r1
        pop r1 off stack r2
        push r4 on stack r2
        pop r5 off stack r3
        pop r4 off stack r3
        r5 := r4 - r5
        push r5 on stack r3
        pop r4 off stack r2
        goto waiting

// Remove the top two values x and y from the value stack and push 
// x * y back onto stack r3, then return to waiting
mul:
        push r1 on stack r2
        goto check_dbl_underflow linking r1
        pop r1 off stack r2
        push r4 on stack r2
        pop r5 off stack r3
        pop r4 off stack r3
        r5 := r4 * r5
        push r5 on stack r3
        pop r4 off stack r2
        goto waiting

// Remove the top two values x and y from the value stack and push 
// x / y back onto stack r3, then return to waiting
div:
        push r1 on stack r2
        goto check_dbl_underflow linking r1
        pop r1 off stack r2
        push r4 on stack r2
        pop r5 off stack r3
        pop r4 off stack r3
        if (r5 == 0) goto div_by_zero
        push r4 on stack r2
        push r5 on stack r2
        goto check_negs
        
        pos_div:
        pop r3 off stack r2  // restore r3 after check negs
        r5 := r4 / r5     //  x / y
        push r5 on stack r3  // push division result back on value stack
        pop r4 off stack r2  //restore r4
        goto waiting

        neg_div:
        pop r1 off stack r2 // undo using temp from check negs
        pop r3 off stack r2 // restore r3 after check negs
        r5 := r4 / r5     //  x / y
        r5 := ~r5
        r5 := r5 + 1  // convert result back to negative representation
        push r5 on stack r3  // push division result back on value stack
        pop r4 off stack r2  //restore r4
        goto waiting

        div_by_zero:
        push r4 on stack r3  // restore 2nd most recent value
        push r5 on stack r3  // restore most recent value
        pop r4 off stack r2  // restore r4
        output "Division by zero\n"
        goto waiting
        
// Upon entry top two values of call stack will correspond to values x and y.  
// Determines which form of division to call based on polarity of x and y.
check_negs:
        pop r5 off stack r2
        pop r4 off stack r2
        push r3 on stack r2
        r3 := 0   // r3 temporarily corresponds to number of negative values
        push r5 on stack r2
        r5 := r5 & 2147483648 // test if value is negative
        if (r5 != 0) goto change_y
        pop r5 off stack r2 // restore r5 as is if not negative
        goto post_change_y

        change_y:  // if y is negative, convert to pos decimal representation
        pop r5 off stack r2
        r5 := ~r5
        r5 := r5 + 1 
        r3 := r3 +1
        goto post_change_y

        post_change_y:
        push r4 on stack r2
        r4 := r4 & 2147483648
        if (r4 != 0) goto change_x
        pop r4 off stack r2
        goto post_change_x

        change_x: // if x is negative, convert to pos decimal representation
        pop r4 off stack r2
        r4 := ~r4
        r4 := r4 + 1
        r3 := r3 + 1

        post_change_x:
        push r1 on stack r2
        if (r3 == 1) goto neg_div using r1  // if exactly 1 negative value
        pop r1 off stack r2
        goto pos_div  // in cases of no negatives or double negatives, pos div
        
// Remove the top two values x and y from the value stack and push 
// x | y back onto stack r3, then return to waiting
or:
        push r1 on stack r2
        goto check_dbl_underflow linking r1
        pop r1 off stack r2
        push r4 on stack r2
        pop r5 off stack r3
        pop r4 off stack r3
        r5 := r4 | r5
        push r5 on stack r3
        pop r4 off stack r2
        goto waiting

// Remove the top two values x and y from the value stack and push 
// x & y back onto stack r3, then return to waiting
and:
        push r1 on stack r2
        goto check_dbl_underflow linking r1
        pop r1 off stack r2
        push r4 on stack r2
        pop r5 off stack r3
        pop r4 off stack r3
        r5 := r4 & r5
        push r5 on stack r3
        pop r4 off stack r2
        goto waiting

// Remove the top value x from the value stack and push 
// -x back onto stack r3, then return to waiting
change:
        push r1 on stack r2
        goto check_single_underflow linking r1
        pop r1 off stack r2
        pop r5 off stack r3
        r5 := ~r5
        r5 := r5 + 1   // convert to two's complement
        push r5 on stack r3
        goto waiting

// Remove the top value x from the value stack and push 
// ~x back onto stack r3, then return to waiting
complement:
        push r1 on stack r2
        goto check_single_underflow linking r1
        pop r1 off stack r2
        pop r5 off stack r3
        r5 := ~r5
        push r5 on stack r3
        goto waiting

// Remove the top two values x and y from the value stack and push 
// values back onto stack r3 in reverse order, then return to waiting
swap:
        push r1 on stack r2
        goto check_dbl_underflow linking r1
        pop r1 off stack r2
        push r4 on stack r2
        pop r5 off stack r3
        pop r4 off stack r3
        push r5 on stack r3
        push r4 on stack r3
        pop r4 off stack r2
        goto waiting

// Remove the top value x from the value stack and push 
// x back onto stack r3 twice, then return to waiting
dupe:
        push r1 on stack r2
        goto check_single_underflow linking r1
        pop r1 off stack r2
        pop r5 off stack r3
        push r5 on stack r3
        push r5 on stack r3  // push value again to duplicate
        goto waiting

// Remove the top value x from stack r3 and return to waiting
pawp:
        push r1 on stack r2
        goto check_single_underflow linking r1
        pop r1 off stack r2
        pop stack r3
        goto waiting

// Remove all values from stack r3 and return to waiting
zerostack:
        push r4 on stack r2
        if (r3 >=s endvalstack) goto exit_zerostack using r4
        pop r4 off stack r2
        pop stack r3
        goto zerostack

        exit_zerostack:
        pop r4 off stack r2
        goto waiting
