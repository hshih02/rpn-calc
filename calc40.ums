# calc40.ums
#
# 
#
.temps r6, r7
.zero r0

.section data
        .space 10000
        endvalstack:

.section rodata
        jumptable:
        .space 256
        endjumptable:

.section init 
        r0 := 0
        r3 := endvalstack
        r5 := jumptable

init_jumptable:
        m[r0][r5] := input_error
        r5 := r5 + 1
        if (r5 != endjumptable ) goto init_jumptable using r4

        m[r0][jumptable + '0'] := digit
        m[r0][jumptable + '1'] := digit
        m[r0][jumptable + '2'] := digit
        m[r0][jumptable + '3'] := digit
        m[r0][jumptable + '4'] := digit
        m[r0][jumptable + '5'] := digit
        m[r0][jumptable + '6'] := digit
        m[r0][jumptable + '7'] := digit
        m[r0][jumptable + '8'] := digit
        m[r0][jumptable + '9'] := digit
        m[r0][jumptable + ' '] := waiting
        m[r0][jumptable + '\n'] := newline
        m[r0][jumptable + '+'] := add 
        m[r0][jumptable + '-'] := sub
        m[r0][jumptable + '*'] := mul
        m[r0][jumptable + '/'] := div
        m[r0][jumptable + '|'] := or
        m[r0][jumptable + '&'] := and
        m[r0][jumptable + 'c'] := change
        m[r0][jumptable + '~'] := complement 
        m[r0][jumptable + 's'] := swap 
        m[r0][jumptable + 'd'] := dupe
        m[r0][jumptable + 'p'] := pawp
        m[r0][jumptable + 'z'] := zerostack

        // goto m[r0][jumptable + '+']
        // goto waiting



        
.section text
main:
        push r1 on stack r2
        // r5 := 987654321
        // push r5 on stack r2
        goto waiting linking r1
        pop r1 off stack r2
        goto r1

waiting:
        push r1 on stack r2
        r1 := input()
        r5 := jumptable + r1
        pop r1 off stack r2
        goto m[r0][r5]   //goto jumptable
        

waiting_with_char:
        push r1 on stack r2
        r1 := input()

entering:
        output "entering state\n"
        r1 := input()
        r5 := jumptable + r1
        push r4 on stack r2
        push r1 on stack r2
        if (m[r0][r5] == digit) goto multiple_digits using r4, r1
        output "still in entering\n"
        pop r1 off stack r2
        pop r4 off stack r2
        goto m[r0][r5]

multiple_digits:
        pop r1 off stack r2
        pop r4 off stack r2
        pop r5 off stack r3    //get previously entered digit
        output "multiple digits\n"
        r1 := r1 - 48 //remove ascii offset
        output "passed r1 - 48\n"
        r5 := r5 * 10
        output "passed r5 * 10\n"
        r5 := r5 + r1
        output "passed r5 + r1\n"
        push r5 on stack r3  //push new mutli digit value onto value stack
        goto entering

        

newline:
        output "newline\n"
        push r1 on stack r2
        goto print_setup linking r1
        pop r1 off stack r2
        goto waiting 

print:

input_error:
        output "Unknown character '"

        output "'"
        halt

digit:
        output "digit\n"
        r5 := r5 - jumptable
        r5 := r5 - 48   //remove ascii offset
        push r5 on stack r3   //push digit value onto value stack
        goto entering

add:
        output "add"
        halt

sub:
        output "sub"
        halt

mul:
        output "mult"
        halt
div:
        output "divide"
        halt

or:

and:

change:

complement:

swap:

dupe:

pawp:

zerostack:

